import ballerina/http;
import ballerina/log;
import ballerina/mime;
import ballerina/openapi;
{{#servers}}
listener http:Listener ep{{@index}} = new({{port}}{{#host}}, config = {host: "{{host}}"}{{/host}});
{{/servers}}
@openapi:Service {{=<% %>=}}{<%={{ }}=%>
    contract: "{{definitionPath}}"{{#if tags}},
    tags: [ {{#tags}}{{name}}{{/tags}} ]{{/if}}{{#if tags}},
    operations: [ {{#operations}}{{name}}{{/operations}} ]{{/if}}
}
@http:ServiceConfig {
    basePath: "{{servers.0.basePath}}"{{!-- {{only one base path is allowed for all endpoints}} --}}
}
service {{cut info.title " "}} on {{#servers}}ep{{@index}}{{#unless @last}}, {{/unless}}{{/servers}} {{=<% %>=}}{<%={{ }}=%>{{#paths}}{{#value}}{{#if sameResourceOperationExists}}{{#sameResourceOperations}}{{#value}}{{!-- If multiple methods belongs to one Ballerina resource implementation this will generate the code --}}

    @http:ResourceConfig {{=<% %>=}}{<%={{ }}=%>{{#if methods}}
        methods:[{{#methods}}"{{.}}"{{#unless @last}}, {{/unless}}{{/methods}}],{{/if}}
        path:"{{../../key}}"{{#requestBody}}{{#equals "multipart/form-data" requestBody.selectedMedia.mediaType}}{{else}},
        body:"_{{resourceName}}Body"{{/equals}}{{/requestBody}}
    }{{#deprecated}}
    deprecated {}
    {{/deprecated}}
    resource function {{resourceName}} (http:Caller outboundEp, http:Request _{{resourceName}}Req{{#parameters}}{{>pathParams}}{{/parameters}}{{#requestBody}}{{>reqBody}}{{/requestBody}}) returns error? {{=<% %>=}}{<%={{ }}=%>{{#equals requestBody.selectedMedia.mediaType "multipart/form-data"}}
        mime:Entity[] _{{resourceName}}Body = check _{{resourceName}}Req.getBodyParts();{{/equals}}
        http:Response _{{resourceName}}Res = {{resourceName}}(_{{resourceName}}Req{{#parameters}}{{#equals in "path"}}, {{name}}{{/equals}}{{/parameters}}{{#requestBody}}, {{#if requestBody.selectedMedia.schema.type}}_{{resourceName}}Body{{/if}}{{^requestBody.selectedMedia.schema.type}}{{#if requestBody.selectedMedia.schema.properties}}{{#requestBody}}{{#selectedMedia}}{{#schema}}{{#properties}}{{key}}{{#unless @last}}, {{/unless}}{{/properties}}{{/schema}}{{/selectedMedia}}{{/requestBody}}{{/if}}{{/requestBody.selectedMedia.schema.type}}{{/requestBody}});
        var result = outboundEp->respond(_{{resourceName}}Res);
        if (result is error) {
            log:printError(result.reason(), err = result);
        }
    }{{/value}}{{/sameResourceOperations}}{{/if}}{{#if noOperationsForPath}}{{#deprecated}} {{!-- If there is not operations available for a path generate a empty resource --}}
    deprecated {}{{/deprecated}}
    resource function {{resourceName}} (http:Caller outboundEp, http:Request _{{resourceName}}Req) {
        http:Response _{{resourceName}}Res = new;
        string _{{resourceName}}Payload = "Sample {{resourceName}} Response";
        _{{resourceName}}Res.setTextPayload(_{{resourceName}}Payload);
        var result = outboundEp->respond(_{{resourceName}}Res);
        if (result is error) {
            log:printError(result.reason(), err = result);
        }
    }{{/if}}{{/value}}{{/paths}}{{#paths}}{{#value}}{{#operations}}{{#value}}{{!-- Generate Ballerina resource for single method resources --}}
    
    @http:ResourceConfig {
        methods:["{{upper key}}"],
        path:"{{../../key}}"{{#requestBody}}{{#equals "multipart/form-data" requestBody.selectedMedia.mediaType}}{{else}},
        body:"_{{operationId}}Body"{{/equals}}{{/requestBody}}
    }{{#deprecated}}
    deprecated {}{{/deprecated}}
    resource function {{operationId}} (http:Caller outboundEp, http:Request _{{operationId}}Req{{#parameters}}{{>pathParams}}{{/parameters}}{{#requestBody}}{{>reqBody}}{{/requestBody}}) returns error? {{=<% %>=}}{<%={{ }}=%>{{#equals requestBody.selectedMedia.mediaType "multipart/form-data"}}
        mime:Entity[] _{{operationId}}Body = check _{{operationId}}Req.getBodyParts();{{/equals}}
        http:Response _{{operationId}}Res = {{operationId}}(_{{operationId}}Req{{#parameters}}{{#equals in "path"}}, {{name}}{{/equals}}{{/parameters}}{{#requestBody}}, {{#if requestBody.selectedMedia.schema.type}}_{{operationId}}Body{{/if}}{{^requestBody.selectedMedia.schema.type}}{{#if requestBody.selectedMedia.schema.properties}}{{#requestBody}}{{#selectedMedia}}{{#schema}}{{#properties}}{{key}}{{#unless @last}}, {{/unless}}{{/properties}}{{/schema}}{{/selectedMedia}}{{/requestBody}}{{/if}}{{/requestBody.selectedMedia.schema.type}}{{/requestBody}});
        var result = outboundEp->respond(_{{operationId}}Res);
        if (result is error) {
            log:printError(result.reason(), err = result);
        }
    }{{/value}}{{/operations}}{{/value}}{{/paths}}

}
